from src.cryptography.ring_signature import verify_lrs
from gmpy2 import mpz
TEST_LRS_PUBLIC_KEY_1 = "".join(
    (
        "-----BEGIN PUBLIC KEY-----\n",
        "MTE0MDg5NjMxOTYzNTkzODIyOTMyOTMyNjEwMDA0MTUwODM3MDQzNjExOTAxOTU5\n",
        "NDE5MzkwNzc2NTU3MTQyOTc1ODEzMTg3MDUxMzU2MzM4ODM5Mjg0NzM3MDAyNDg3\n",
        "Njc5ODgxMjUyMzYyODgzMjc4NTkzMzg5MzcwMjQ3MzA3NjUxMTgwOTI4MDIzNjMx\n",
        "NjU1MDI3MDE0NzI1MjYxNzkzNzcwODYzMTc1MTA0MTY1NTg5MTAzNjk5NDYzMzI3\n",
        "NzI5ODg3NzIwOTE4OTU2Mjk2Njg1ODYzNzY1MzI3NjM3NjU1MTM3NjQ4NDk4Nzkz\n",
        "MjI2OTM1NDc4Njc0MDQ2MTY2MjI3MjgyODA3NjA2MzA3OTc2MzU4MzYxNjY0MDcz\n",
        "MTc3NTMxNjkxMjU4OTk5MjEwODQ0ODU5MzUyNTcxOTcwNjQ3MzEzODU2MzMyNDAy\n",
        "OTI2MjQxOTI0MDE0NjQ2Nzk2NDY3OTA5MzU4MTM3MzAwNjk0MTM5MjMzNDA0Mzk2\n",
        "NDEzMjUyOTMxMTI3NzcyNDA5MDU5MjA5MTEzODYzNjMyNjE0NjM1MDk3ODMxNjY5\n",
        "MjU0MzQ3OTI0MzQ5ODU5NzkzODQ1NzA1NTU5NDE4NTY0MjQ0NDIxNDgyMTA5MDk0\n",
        "ODQyMzY0MDY1MTg2NTc0NTE1NDE3MTYxMzQ0MzQ0MjU0MTY1NTg0NDY5MTAzMjEx\n",
        "NTA5Mzc4MDU4ODAyMjgzMjI1MjU2ODIxOTY0MjIzMDM5MzQzNjI5NzMxNzYzMjUw\n",
        "NjAwMTczMzMxMjIzNTQ0OTc3NDYzNTMwOTQ2NDUyNzMyNDI5NjIxNzI=\n",
        "-----END PUBLIC KEY-----\n"
    )
)

TEST_LRS_PUBLIC_KEY_2 = "".join(
    (
        "-----BEGIN PUBLIC KEY-----\n",
        "NDM4NzUxODUzODI5ODkzODAzMDU2ODA0NjYwODQ1MTQ3Mjc2Mjk2MjgyNjQ4NzM1\n",
        "Mjk0MjMyNzkzMDY0MzY1MDUzNDgxMjc1MzY2NDQzMzcwNTI2NTY5OTExMjYzNDQw\n",
        "OTE3NDA3ODk1MTI3ODQxNzA5Mjc4ODgwODYyNDg0OTcyNTk3NDUwNjM4NzMwODky\n",
        "MTMyOTA1MTY1MTY3MDIxMjEzMzg5NzczOTI5NTM1ODc0OTEyMTM3MDcwODQwMjg3\n",
        "NjQ3NDEzMjA5NDkxNDM3NTM2MjAzODIwNDYzMjYyMDY4MDY3NzkyODE5NTU0NzE5\n",
        "MjcyNzE0OTA1NTYwMjQwNzg3NTU5NzA5MTc0ODEzMTYwNjY4OTQwMDYyMjI5NjEx\n",
        "OTQ3MzIxOTE5NDc5OTY2NTQyMzQyNTAxNDE4MDkyNzY4NTMyNDEwMjA4MDA0OTkw\n",
        "NjgwMTcxNzU2MzIyMDE2MjIxODM3MzY1MDExNDEzNDM4MjA5ODE1NjI4MjE4NTAz\n",
        "MDAxMzE5ODU0MzQ0Nzk4MjkwMzA1MTgxOTE3NjY3Mzk2NTYxMjQwNTE4NjQ5MzA3\n",
        "NTc2Mzk2NDMwOTY4MDk3NzY5OTcyMjcwMjY1NTU0Mjc1NDIzNTQyMDQ0ODY2ODk4\n",
        "OTYyMzQ3ODQ4MTUzMzc0NzgwMjUzODg3MzYzNzk3Njc1MTQ4NTk3NzA0MjI3Njgw\n",
        "MDIxODExNDg0MzI5NDc0MTE2Nzg4OTg1MTk0MDY4OTkxMTY4MDQ1NDUzMTEyNDI0\n",
        "MTk0NzM5MDIxMjQxMzg0MjkwODgyMDI4NzcyMDQ2NjkwOTE4NTM4NA==\n",
        "-----END PUBLIC KEY-----\n"
    )
)

TEST_LRS_PUBLIC_KEY_3 = "".join(
    (
        "-----BEGIN PUBLIC KEY-----\n",
        "MTE2NjQ3ODQ1Mzc5MjMwODA0MzU1MjcxNTA4MDIxNTY0Mzk1ODUxODc0NTc2ODAw\n",
        "MDcyNzg2MzE3NDY2MDU1MzE4NzI5OTgyMTYyODY1MzU2NTc0MDQ4MTMxODIwMDE1\n",
        "NzMyODk3NjYxMTM1NzQ4MTk3MTY3MDMxMjQ4MjU3NjI4NzAxNTU4OTU2MjQwMTI5\n",
        "NjgzNTkzOTkxMDMxMDkzMTQ0NjE3ODU3NTg1OTM3NTc2MTAwNDM5NDc0NTU1OTkx\n",
        "MjAwMjAzNzg0OTUxODA4MDMzODU0MTQ5ODAyMjAyNTIyNjM2NDU4NDc1MDg1NTQ3\n",
        "NTM5MzQ2NDg2NzQwMzUyNzMyMzgzMTY4NTEzNjUzOTk1MDA3MTQ2Nzk2OTcxODQz\n",
        "NjIzODgyNjAwNDMzNTQwNzU5NjY5NzM4MzY4MjcwMjk3NTU0ODQyNzEyNTcxMzY1\n",
        "NTgwODYwMDg5OTI5MDk0OTQ4MzM2MTE1MDgwMzA5MDk2MTk4NzUzNTE4NjY5MDIw\n",
        "NjIzOTQxODc2MjA4ODkyNDYzMzU4MjI2NjU2Mzg5ODAxNDkwNTk2NDE2ODk1NDc5\n",
        "Nzk2MDE3NjM2MzYzMzg0NDg4ODM4ODU0ODM0MDE1MDk4MDI5NDExNjAxMTYzNTM3\n",
        "NTU2NDEyODMwMTAwNjE5OTAzMjk0MDg5MDA0NDkzNjUwMTMxNDYxNzc3NDA0Mjg5\n",
        "OTEyMjY2Mjg2NTY4NTM2NjI3MDM2Nzg1NjQ4NjA2MzAwMDEyNjY3NDQzNDg2MTM5\n",
        "NjYzMDAyNjgyNzAyMzc4Mzk1MDMwMjI4OTUxMzk1NjIxMzgwODAwOTU=\n",
        "-----END PUBLIC KEY-----\n"
    )
)

# Scenario:
# - ring with PK1, PK2, PK3
# - private key corresponding to PK1
TEST_LRS_SIGNATURE_1 = [
    "12774633802750336576378717265780233998359535317562453000030310044595126776737819192178597069563391081742489292722322691605293068942627170275539212841924231086652644358486028003353633185769146677864731244940826733605740180847413093860140876452400919343327255251701226356012631982005678059943655231626673216881379081102934607027717593103140989178566564041881932163042059138947537959422804092857862926067636800483701542831287478764187084516455343481770449208232628178525722169700748559804761467734398048411631267558706418902029472570742937193886067410459458422776004886913795837683417313846550023011363633847821362270508",
    "32019702757440085546134069637556410298403354964243716261429454756461805120256",
    "63596048489167923342556756679679934005196144175533814182344343951114916322629",
    "54789208679353523160774073714735878173067916753813377956734010214517642826040",
    "25518978707755681411133065443777280266928977630978356597209229551801919577153"
]

# Scenario:
# - ring with PK1, PK2
# - private key corresponding to PK3
TEST_LRS_SIGNATURE_2 = [
    "8512060474007687399094181055923512446510492613613275020705679743814755940547567772470501099323688802380161822161097016930952502219264235721775608661158244576319003740366506209759765363975777024397327637281760242326864769195310444149357081888787900251112582692949613646332584951798170793425705046386169350240636243342293545951222582685694798881985160442079436169516332039980573144504792265043924487242450736547762638034230771192227015240534542954536722517196237818066223657770605090256869632292331188816227132645154647326134551045514858483816230198106932956202182027233162837735001187333521053246388737042411299517045",
    "18843620191446079009974975545231081575088520243842471100244824713178910655525",
    "15156056356079498048001904539682320646534654595865513968139919157040359489251",
    "12525964107720779193543241848548802689801891614202692933094458970685527734721"
]

# Scenario:
# - ring with PK1, PK3
# - PK3 replaced by PK2 by dishonest user
# - private key corresponding to PK2
TEST_LRS_SIGNATURE_3 = [
    "9906555857433418258998552659589257136267615327068274719997924021213815568652505125284985451922370449498780880245644713817378118417408241958558661008481219969285304554735583061448389480690993791835499293762622787061138625540169409843900836785440382657608420686542203407554682248128406012482578320740614972522624638862990437209961578422857000793352138504734775884867411905043022138991806915332843521512598486814729463903806405820009978404537722874624305483144494874025077966587013558432184979881538965763889738631159761286776429012451248419219382487016717765991420511945631404821147620229078418071697022740430893231263",
    "25221099941314909101910188007567638244862867146231516778155141931752257099771",
    "46532015801405728240936653761097443041267900200030502908361392236723914249379",
    "42160821658027775272290281866011474822698516238438264347717249582696302768060"
]

MESSAGE = "m"

def test_lrs_happy_path():
    ring = [
        TEST_LRS_PUBLIC_KEY_1,
        TEST_LRS_PUBLIC_KEY_2,
        TEST_LRS_PUBLIC_KEY_3
    ]
    assert verify_lrs(MESSAGE, ring, [mpz(x) for x in TEST_LRS_SIGNATURE_1])


def test_lrs_signed_with_private_key_outside_of_ring():
    ring = [
        TEST_LRS_PUBLIC_KEY_1,
        TEST_LRS_PUBLIC_KEY_2
    ]
    assert not verify_lrs(MESSAGE, ring, [mpz(x) for x in TEST_LRS_SIGNATURE_2])

def test_lrs_signed_after_replacing_public_key_by_signer():
    ring = [
        TEST_LRS_PUBLIC_KEY_1,
        TEST_LRS_PUBLIC_KEY_3
    ]
    assert not verify_lrs(MESSAGE, ring, [mpz(x) for x in TEST_LRS_SIGNATURE_3])
