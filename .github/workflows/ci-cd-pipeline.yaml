name: CI/CD Pipeline

on:
  pull_request:
  push:
    branches:
      - dev
      - main
  workflow_dispatch:

jobs:
  test-frontend:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Setup backend
        working-directory: ./backend
        run: |
          docker build . --file Dockerfile --tag noname-surveys-backend:latest
          docker run -d -e TESTING=true -p 8000:8000 --name noname-surveys-backend noname-surveys-backend:latest

      - name: Wait for backend to be ready
        run: |
          for i in {1..30}; do
            if curl -s http://localhost:8000/docs; then
              echo "Backend is up!"
              break
            fi
            echo "Waiting for backend to be ready..."
            sleep 5
          done

      - name: Install dependencies
        run: npm ci

      - name: Generate env file
        run: |
          echo "BACKEND_HOST=http://localhost:8000" >> .env
          echo "SURVEY_CODE=${{ env.SURVEY_CODE }}" >> $GITHUB_ENV

      - name: Install Playwright Browsers
        run: npx playwright install --with-deps --only-shell

      - name: Run Playwright tests
        run: |
          source ../backend/scripts/test_data.sh
          npx playwright test --reporter=github

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: frontend/test-results/
          retention-days: 30

  test-backend:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          export PATH="$HOME/.local/bin:$PATH"

      - name: Install dependencies
        run: poetry install

      - name: Run backend tests
        run: make test_cov_json

      - uses: actions/upload-artifact@v4
        if: always()
        with:
          name: pytest-report
          path: backend/test-results/
          retention-days: 30

  dockerize:
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set Docker tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "FRONTEND_TAG=main" >> $GITHUB_ENV
            echo "BACKEND_TAG=main" >> $GITHUB_ENV
          else
            echo "FRONTEND_TAG=dev" >> $GITHUB_ENV
            echo "BACKEND_TAG=dev" >> $GITHUB_ENV
          fi

      - name: Build and push frontend Docker image
        run: |
          docker build ./frontend/. --file ./frontend/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-frontend:${{ env.FRONTEND_TAG }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-frontend:${{ env.FRONTEND_TAG }}

      - name: Build and push backend Docker image
        run: |
          docker build ./backend/. --file ./backend/Dockerfile --tag ${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-backend:${{ env.BACKEND_TAG }}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-backend:${{ env.BACKEND_TAG }}

  deploy:
    needs: dockerize
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/dev'
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set Docker tags
        id: tags
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "FRONTEND_TAG=main" >> $GITHUB_ENV
            echo "BACKEND_TAG=main" >> $GITHUB_ENV
          else
            echo "FRONTEND_TAG=dev" >> $GITHUB_ENV
            echo "BACKEND_TAG=dev" >> $GITHUB_ENV
          fi

      - name: Set up SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      
      - name: Copy deployment YAML files to the cluster
        run: |
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no k8s/frontend-deployment.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_ADDRESS }}:/tmp/frontend-deployment.yaml
          scp -P ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no k8s/backend-deployment.yaml ${{ secrets.SSH_USER }}@${{ secrets.SSH_ADDRESS }}:/tmp/backend-deployment.yaml

      - name: Deploy to Minikube via kubectl
        run: |
          ssh -p ${{ secrets.SSH_PORT }} -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_ADDRESS }} <<EOF
            kubectl apply -f /tmp/frontend-deployment.yaml --namespace=default
            kubectl apply -f /tmp/backend-deployment.yaml --namespace=default
            kubectl set image deployment/frontend frontend=${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-frontend:${{ env.FRONTEND_TAG }} --namespace=default
            kubectl set image deployment/backend backend=${{ secrets.DOCKERHUB_USERNAME }}/noname-surveys-backend:${{ env.BACKEND_TAG }} --namespace=default
            kubectl rollout restart deployment/frontend --namespace=default
            kubectl rollout restart deployment/backend --namespace=default
          EOF